# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import worker_to_scheduler_pb2 as worker__to__scheduler__pb2


class WorkerToSchedulerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RegisterWorker = channel.unary_unary(
        '/WorkerToScheduler/RegisterWorker',
        request_serializer=worker__to__scheduler__pb2.RegisterWorkerRequest.SerializeToString,
        response_deserializer=worker__to__scheduler__pb2.RegisterWorkerResponse.FromString,
        )
    self.Heartbeat = channel.unary_unary(
        '/WorkerToScheduler/Heartbeat',
        request_serializer=worker__to__scheduler__pb2.HeartbeatRequest.SerializeToString,
        response_deserializer=common__pb2.Empty.FromString,
        )


class WorkerToSchedulerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def RegisterWorker(self, request, context):
    """Registers the worker with the scheduler
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Heartbeat(self, request, context):
    """Sends a heartbeat message about a job to scheduler
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_WorkerToSchedulerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RegisterWorker': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterWorker,
          request_deserializer=worker__to__scheduler__pb2.RegisterWorkerRequest.FromString,
          response_serializer=worker__to__scheduler__pb2.RegisterWorkerResponse.SerializeToString,
      ),
      'Heartbeat': grpc.unary_unary_rpc_method_handler(
          servicer.Heartbeat,
          request_deserializer=worker__to__scheduler__pb2.HeartbeatRequest.FromString,
          response_serializer=common__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'WorkerToScheduler', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
